local success, Luna = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/master/source.lua", true))()
end)
if not success then
    warn("Failed to load Luna library: " .. tostring(Luna))
    return
end
print("Luna library loaded successfully!")

local plr = game.Players.LocalPlayer
if not plr then
    warn("Player not found, waiting...")
    plr = game.Players.LocalPlayerAdded:Wait()
end
local character = plr.Character or plr.CharacterAdded:Wait()
local humPart = character:WaitForChild("HumanoidRootPart")
plr.CharacterAdded:Connect(function(char)
    character = char
    humPart = char:WaitForChild("HumanoidRootPart")
    print("Character updated, humPart:", humPart)
end)

local map = nil
game.Workspace.DescendantAdded:Connect(function(m)
    if m:IsA("Model") and m.Name == "CoinContainer" then
        map = m
        print("CoinContainer found:", m)
    end
end)

local delay = 2.5
getgenv().farm = false

-- Create Luna Window
local Window = Luna:CreateWindow({
    Name = "MLNZ | habrfarm Bdltioni",
    Subtitle = "v4.0 | Summer UPD!",
    LogoID = nil,
    LoadingEnabled = true,
    LoadingTitle = "Luna Interface Suite",
    LoadingSubtitle = "by Nebula Softworks"
})
print("Window created:", Window)

-- Create Tab
local Tab = Window:CreateTab("Autofarm")
print("Tab created:", Tab)

-- Create Section
local Section = Tab:CreateSection("Fastest Coin Autofarm")
print("Section created:", Section)

-- Create Toggle for BeachBall Farm
local toggle = Section:CreateToggle({
    Name = "Enable Fastest Autofarm",
    Description = "Toggle to start/stop farming BeachBalls",
    Default = false,
    Callback = function(state)
        getgenv().farm = state
        print("Toggle state changed to:", state)
        if state then
            spawn(function()
                while getgenv().farm do
                    if not map or not map.Parent then
                        map = nil
                        for _, m in ipairs(game.Workspace:GetDescendants()) do
                            if m:IsA("Model") and m.Name == "CoinContainer" then
                                map = m
                                print("CoinContainer reassigned:", m)
                                break
                            end
                        end
                    end
                    if map and map.Parent then
                        for _, coin in ipairs(map:GetChildren()) do
                            if not getgenv().farm then break end
                            if coin:IsA("Part") and coin.Name == "Coin_Server" and coin:GetAttribute("CoinID") == "BeachBall" then
                                local cv = coin:FindFirstChild("CoinVisual")
                                if cv and cv.Transparency ~= 1 then
                                    if not humPart or not humPart.Parent then
                                        humPart = character and character:FindFirstChild("HumanoidRootPart")
                                        if not humPart then
                                            warn("HumanoidRootPart not found, waiting...")
                                            character = plr.CharacterAdded:Wait()
                                            humPart = character:WaitForChild("HumanoidRootPart")
                                        end
                                    end
                                    for _, p in pairs(character:GetChildren()) do
                                        if p:IsA("BasePart") and p.CanCollide then p.CanCollide = false end
                                    end
                                    humPart.CFrame = coin.CFrame * CFrame.new(0, 6, 0)
                                    task.wait(delay)
                                end
                            end
                        end
                    else
                        warn("No CoinContainer found, retrying...")
                    end
                    task.wait(1)
                end
            end)
        end
    end
})
print("Toggle created:", toggle)

-- Load Autoload Config
Luna:LoadAutoloadConfig()
print("Autoload config loaded")

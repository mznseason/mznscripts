local Sirius = loadstring(game:HttpGet("https://sirius.menu/sirius"))()
local plr = game.Players.LocalPlayer
local character = plr.Character or plr.CharacterAdded:Wait()
local humPart = character:WaitForChild("HumanoidRootPart")
plr.CharacterAdded:Connect(function(char)
    character = char
    humPart = char:WaitForChild("HumanoidRootPart")
end)
local map
game.Workspace.DescendantAdded:Connect(function(m)
    if m:IsA("Model") and m.Name == "CoinContainer" then
        map = m
    end
end)
local delay = 2.5
getgenv().farm = false

-- Create Sirius Window
local Window = Sirius:CreateWindow({
    Name = "Testol Hub | Autofarm Edition!",
    Theme = "Dark",
    Version = "v4.0 | Summer UPD!",
    TabWidth = 160
})

-- Create Tab
local Tab = Window:CreateTab("Autofarm")

-- Create Section
local Section = Tab:CreateSection("Fastest Coin Autofarm")

-- Create Toggle for BeachBall Farm
Section:CreateToggle("Enable Fastest Autofarm", false, function(state)
    getgenv().farm = state
    while getgenv().farm do
        if (not map) or (not map.Parent) then
            for _,m in ipairs(game.Workspace:GetDescendants()) do
                if m:IsA("Model") and m.Name == "CoinContainer" then
                    map = m
                    break
                end
            end
        end
        if map and map.Parent then
            for _,coin in ipairs(map:GetChildren()) do
                if not getgenv().farm then break end
                if coin:IsA("Part") and coin.Name=="Coin_Server" and coin:GetAttribute("CoinID")=="BeachBall" then
                    local cv = coin:FindFirstChild("CoinVisual")
                    if cv and cv.Transparency~=1 then
                        if not humPart or not humPart.Parent then
                            humPart = character and character:FindFirstChild("HumanoidRootPart")
                            if not humPart then break end
                        end
                        for _,p in pairs(character:GetChildren()) do
                            if p:IsA("BasePart") and p.CanCollide then p.CanCollide=false end
                        end
                        humPart.CFrame = coin.CFrame * CFrame.new(0,6,0)
                        task.wait(delay)
                    end
                end
            end
        end
        task.wait(1)
    end
end)

-- Create Slider for Autofarm Speed (maps to delay)
Section:CreateSlider("Autofarm Speed", 1, 30, 21, 1, function(value)
    delay = 30 / value -- Invert value to match delay (higher speed = lower delay)
end)

-- Create Button for Anti AFK
Section:CreateButton("Anti AFK", function()
    local GC = getconnections or get_signal_cons
    if GC then
        for _,v in pairs(GC(plr.Idled)) do
            if v.Disable then v:Disable() elseif v.Disconnect then v:Disconnect() end
        end
    else
        local vu = cloneref(game:GetService("VirtualUser"))
        plr.Idled:Connect(function()
            vu:CaptureController()
            vu:ClickButton2(Vector2.new())
        end)
    end
end)

-- Create Textbox for Reporting Interval (optional, non-functional placeholder)
Section:CreateTextbox("Reporting Interval (Minutes)", "", function(text)
    -- Placeholder; add custom reporting logic if needed
    print("Reporting Interval set to: " .. text)
end)

-- Create Label (simplified, no color support directly)
Section:CreateLabel("~ t.me/arceusxscripts") -- Color customization would need post-creation adjustment
